n.chains = 3,   # número de cadenas
n.iter = 10000,    # número de pasos
n.burnin = 1000   # calentamiento de la cadena
)
cat(modelo_1.bugs, file = 'modelo_1.bugs')
jags.inits <- function(){
list("mu" = beta(3,3),
"kappa" = beta(3,3))
}
jags_fit <- jags(
model.file = "modelo_1.bugs",    # modelo de JAGS
inits = jags.inits,   # valores iniciales
data = list(x = observaciones$x, coin = observaciones$moneda, nCoins = 2,  N = 14),    # lista con los datos
parameters.to.save = c("theta"),  # parámetros por guardar
n.chains = 3,   # número de cadenas
n.iter = 10000,    # número de pasos
n.burnin = 1000   # calentamiento de la cadena
)
cat(modelo_1.bugs, file = 'modelo_1.bugs')
jags.inits <- function(){
list("mu" = beta(3,3),
"kappa" = beta(3,3))
}
jags_fit <- jags(
model.file = "modelo_1.bugs",    # modelo de JAGS
inits = jags.inits,   # valores iniciales
data = list(x = observaciones$x, coin = observaciones$moneda, nCoins = 2,  N = 14),    # lista con los datos
parameters.to.save = c("theta"),  # parámetros por guardar
n.chains = 3,   # número de cadenas
n.iter = 10000,    # número de pasos
n.burnin = 1000   # calentamiento de la cadena
)
head(jags_fit$BUGSoutput$summary)
#traceplot(jags_fit, varname = c("kappa", "mu", "theta"))
head(jags_fit$BUGSoutput$summary)
traceplot(jags_fit, varname = c("kappa", "mu", "theta"))
cat(modelo_1.bugs, file = 'modelo_1.bugs')
jags.inits <- function(){
list("mu" = beta(3,3),
"kappa" = beta(3,3))
}
jags_fit <- jags(
model.file = "modelo_1.bugs",    # modelo de JAGS
#inits = jags.inits,   # valores iniciales
data = list(x = observaciones$x, coin = observaciones$moneda, nCoins = 2,  N = 14),    # lista con los datos
parameters.to.save = c("theta"),  # parámetros por guardar
n.chains = 3,   # número de cadenas
n.iter = 10000,    # número de pasos
n.burnin = 1000   # calentamiento de la cadena
)
head(jags_fit$BUGSoutput$summary)
traceplot(jags_fit, varname = c("kappa", "mu", "theta"))
cat(modelo_1.bugs, file = 'modelo_1.bugs')
jags_fit <- jags(
model.file = "modelo_1.bugs",    # modelo de JAGS
#inits = jags.inits,   # valores iniciales
data = list(x = observaciones$x, coin = observaciones$moneda, nCoins = 2,  N = 14),    # lista con los datos
parameters.to.save = c("theta"),  # parámetros por guardar
n.chains = 3,   # número de cadenas
n.iter = 10000,    # número de pasos
n.burnin = 1000   # calentamiento de la cadena
)
head(jags_fit$BUGSoutput$summary)
traceplot(jags_fit, varname = c("kappa", "mu", "theta"))
jags_fit$BUGSoutput$sims.list$theta
jags_fit$BUGSoutput$sims.list$theta[1]
jags_fit$BUGSoutput$sims.list$theta[,1]
jags_fit$BUGSoutput$sims.list$theta[,2]
ICtheta1<-apply(jags_fit$BUGSoutput$sims.list$theta[,1],2,quantile,
probs = c(0.025, 0.975))
apply(jags_fit$BUGSoutput$sims.list$theta[,1],2,quantile,
probs = c(0.025, 0.975)
ICtheta1<-apply(jags_fit$BUGSoutput$sims.list$theta[,1],2,quantile, probs = c(0.025, 0.975))
ICtheta1<-apply(jags_fit$BUGSoutput$sims.list$theta[,1],2,quantile,probs = c(0.025, 0.975))
jags_fit$BUGSoutput$sims.list$theta[,2]
apply(jags_fit$BUGSoutput$sims.list$theta,2,quantile, probs = c(0.025, 0.975))
ICthetas<-apply(jags_fit$BUGSoutput$sims.list$theta[,1],2,quantile,probs = c(0.025, 0.975))
ICthetas<-apply(jags_fit$BUGSoutput$sims.list$theta,2,quantile,probs = c(0.025, 0.975))
ICthetas
modelo_regresion.bugs <-
'
model{
for(i in 1 : n) {
y[i] ~ dnorm(y.hat[i], tau.y)
y.hat[i] <- a + b * x[i]
}
a ~ dnorm(0, 0.001)
b ~ dnorm(0, 0.001)
tau.y <- pow(sigma.y, -2)
sigma.y ~ dunif(0, 100)
}
'
cat(modelo_regresion.bugs, file = 'modelo_regresion.bugs')
### Radon
load("radon.Rdata")
# Iniciamos preparando los datos para el análisis, trabajaremos en
# escala logarítmica, hay algunos casos con medición cero, para éstos
# hacemos una pequeña correción redondeándolos a 0.1.
y <- log(ifelse (radon.2$activity == 0, 0.1, radon.2$activity))
# jags
data_radon <- list(n = nrow(radon.2), y = y, x = radon.2$floor)
inits_radon <- function(){
list(a = rnorm(1),
b = rnorm(1),
sigma.y = runif(1))}
parameters_radon <- c("a", "b", "sigma.y")
jags_radon <- jags(
data = data_radon,
inits= inits_radon,
parameters.to.save = parameters_radon,
model.file = "modelo_regresion.bugs"
n.chains = 3,   # número de cadenas
jags_radon <- jags(
data = data_radon,
inits= inits_radon,
parameters.to.save = parameters_radon,
model.file = "modelo_regresion.bugs",
n.chains = 3,   # número de cadenas
n.iter = 10000,    # número de pasos
n.burnin = 1000 )  # calentamiento de la cadena
traceplot(jags_radon, varname = c("a", "b", "sigma.y"))
jags_radon <- jags(
data = data_radon,
inits= inits_radon,
parameters.to.save = parameters_radon,
model.file = "modelo_regresion.bugs",
n.chains = 3,   # número de cadenas
n.iter = 10000,    # número de pasos
n.burnin = 1000 )  # calentamiento de la cadena
traceplot(jags_radon, varname = c("a", "b", "sigma.y"))
traceplot(jags_radon, varname = c("a", "b", "sigma.y"))
View(radon.2)
jags_radon <- jags(
data = data_radon,
inits= inits_radon,
parameters.to.save = parameters_radon,
model.file = "modelo_regresion.bugs",
n.chains = 3,   # número de cadenas
n.iter = 50000,    # número de pasos
n.burnin = 500, # calentamiento de la cadena
n.thin = 1)
traceplot(jags_radon, varname = c("a", "b", "sigma.y"))
modelo_regresion.bugs <-
'
model{
for(i in 1 : n) {
y[i] ~ dnorm(y.hat[i], tau.y)
y.hat[i] <- a + b * x[i]
}
a ~ dnorm(0, 0.001)
for (j in 1:2) { b[j] ~ dnorm(0,0.001) }
tau.y <- pow(sigma.y, -2)
sigma.y ~ dunif(0, 100)
#Prediction 1
for (i in 1:n) { yf1[i] ~ dnorm(y.hat[i],tau) }
}
'
mod_reg_var.bugs <-
'
model{
for(i in 1 : n) {
y[i] ~ dnorm(y.hat[i], tau.y)
y.hat[i] <- a + b * x[i]
}
a ~ dnorm(0, 0.001)
for (j in 1:2) { b[j] ~ dnorm(0,0.001) }
tau.y <- pow(sigma.y, -2)
sigma.y ~ dunif(0, 100)
#Prediction 1
for (i in 1:n) { yf1[i] ~ dnorm(y.hat[i],tau) }
}
'
jags_radonx <- jags(
data = data_radon,
inits= inits_radon,
parameters.to.save = parameters_radon,
model.file = "mod_reg_var.bugs",
n.chains = 3,   # número de cadenas
n.iter = 50000,    # número de pasos
n.burnin = 500, # calentamiento de la cadena
n.thin = 1)
mod_reg_var.bugs <-
'
model{
for(i in 1 : n) {
y[i] ~ dnorm(y.hat[i], tau.y)
y.hat[i] <- a + b * x[i]
}
a ~ dnorm(0, 0.001)
for (j in 1:2) { b[j] ~ dnorm(0,0.001) }
tau.y <- pow(sigma.y, -2)
sigma.y ~ dunif(0, 100)
#Prediction 1
for (i in 1:n) { yf1[i] ~ dnorm(y.hat[i],tau) }
}
'
jags_radonx <- jags(
data = data_radon,
inits= inits_radon,
parameters.to.save = parameters_radon,
model.file = "mod_reg_var.bugs",
n.chains = 3,   # número de cadenas
n.iter = 50000,    # número de pasos
n.burnin = 500, # calentamiento de la cadena
n.thin = 1)
modelo_regresion.bugs <-
'
model{
for(i in 1 : n) {
y[i] ~ dnorm(y.hat[i], tau.y)
y.hat[i] <- a + b * x[i]
}
a ~ dnorm(0, 0.001)
b ~ dnorm(0, 0.001)
tau.y <- pow(sigma.y, -2)
sigma.y ~ dunif(0, 100)
}
'
cat(modelo_regresion.bugs, file = 'modelo_regresion.bugs')
### Radon
load("radon.Rdata")
# Iniciamos preparando los datos para el análisis, trabajaremos en
# escala logarítmica, hay algunos casos con medición cero, para éstos
# hacemos una pequeña correción redondeándolos a 0.1.
y <- log(ifelse (radon.2$activity == 0, 0.1, radon.2$activity))
# jags
data_radon <- list(n = nrow(radon.2), y = y, x = radon.2$floor)
inits_radon <- function(){
list(a = rnorm(1),
b = rnorm(1),
sigma.y = runif(1))}
parameters_radon <- c("a", "b", "sigma.y")
jags_radon <- jags(
data = data_radon,
inits= inits_radon,
parameters.to.save = parameters_radon,
model.file = "modelo_regresion.bugs",
n.chains = 3,   # número de cadenas
n.iter = 50000,    # número de pasos
n.burnin = 500, # calentamiento de la cadena
n.thin = 1)
traceplot(jags_radon, varname = c("a", "b", "sigma.y"))
modelo_regresion.bugs <-
'
model{
for(i in 1 : n) {
y[i] ~ dnorm(y.hat[i], tau.y)
y.hat[i] <- a[i] + b * x[i]
}
for(j in 1:n){a[j] ~ dnorm(0, 0.001)}
b ~ dnorm(0, 0.001)
tau.y <- pow(sigma.y, -2)
sigma.y ~ dunif(0, 100)
#Prediction 1
for (i in 1:n) { yf1[i] ~ dnorm(y.hat[i],tau) }
}
'
mod_reg_var.bugs <-
'
model{
for(i in 1 : n) {
y[i] ~ dnorm(y.hat[i], tau.y)
y.hat[i] <- a[i] + b * x[i]
}
for(j in 1:n){a[j] ~ dnorm(0, 0.001)}
b ~ dnorm(0, 0.001)
tau.y <- pow(sigma.y, -2)
sigma.y ~ dunif(0, 100)
#Prediction 1
for (i in 1:n) { yf1[i] ~ dnorm(y.hat[i],tau) }
}
'
jags_radonx <- jags(
data = data_radon,
inits= inits_radon,
parameters.to.save = parameters_radon,
model.file = "mod_reg_var.bugs",
n.chains = 3,   # número de cadenas
n.iter = 50000,    # número de pasos
n.burnin = 500, # calentamiento de la cadena
n.thin = 1)
?jags
mod_county<-'
model {
for(i in 1:n) {
y[i] ~ dnorm(beta[county[i]], sigma^(-2))
}
for(j in 1:J) {
beta[j] ~ dnorm(mu, sigma.b^(-2))
}
mu ~ dnorm(0, 0.0001)
sigma ~ dunif(0, 100)
sigma.b ~ dunif(0, 100)
}
'
mod_county.bugs<-'
model {
for(i in 1:n) {
y[i] ~ dnorm(beta[county[i]], sigma^(-2))
}
for(j in 1:J) {
beta[j] ~ dnorm(mu, sigma.b^(-2))
}
mu ~ dnorm(0, 0.0001)
sigma ~ dunif(0, 100)
sigma.b ~ dunif(0, 100)
}
'
mod_county.bugs<-'
model {
for(i in 1:n) {
y[i] ~ dnorm(beta[county[i]], sigma^(-2))
}
for(j in 1:J) {
beta[j] ~ dnorm(mu, sigma.b^(-2))
}
mu ~ dnorm(0, 0.0001)
sigma ~ dunif(0, 100)
sigma.b ~ dunif(0, 100)
}
'
cat(mod_county.bugs, file = 'mod_county.bugs')
jags_radonx <- jags(
data = data_radon,
inits= inits_radon,
parameters.to.save = parameters_radon,
model.file = "mod_reg_var.bugs",
n.chains = 3,   # número de cadenas
n.iter = 50000,    # número de pasos
n.burnin = 500, # calentamiento de la cadena
n.thin = 1)
cat(mod_county.bugs, file = 'mod_county.bugs')
jags_radonx <- jags(
data = data_radon,
inits= inits_radon,
parameters.to.save = parameters_radon,
model.file = "mod_county.bugs",
n.chains = 3,   # número de cadenas
n.iter = 50000,    # número de pasos
n.burnin = 500, # calentamiento de la cadena
n.thin = 1)
cat(mod_county.bugs, file = 'mod_county.bugs')
parameters_rad <- c("beta", "sigma.b")
jags_radonx <- jags(
data = data_radon,
inits= inits_radon,
parameters.to.save = parameters_rad,
model.file = "mod_county.bugs",
n.chains = 3,   # número de cadenas
n.iter = 50000,    # número de pasos
n.burnin = 500, # calentamiento de la cadena
n.thin = 1)
cat(mod_county.bugs, file = 'mod_county.bugs')
r1.inits <- list(beta = rnorm(J), mu = rnorm(1),
sigma = runif(1), sigma.b = runif(1))
cat(mod_county.bugs, file = 'mod_county.bugs')
J=85
r1.inits <- list(beta = rnorm(J), mu = rnorm(1),
sigma = runif(1), sigma.b = runif(1))
r1.jags <- jags.model("mod_county.bugs", inits = r1.inits)
cat(mod_county.bugs, file = 'mod_county.bugs')
J=85
r1.inits <- list(beta = rnorm(J), mu = rnorm(1),
sigma = runif(1), sigma.b = runif(1))
r1.jags <- jags.model("mod_county.bugs", inits = r1.inits,J=85)
cat(mod_county.bugs, file = 'mod_county.bugs')
J=85
r1.inits <- list(beta = rnorm(J), mu = rnorm(1),
sigma = runif(1), sigma.b = runif(1),J=85)
r1.jags <- jags.model("mod_county.bugs", inits = r1.inits)
mod_county.bugs<-'
model {
for(i in 1:n) {
y[i] ~ dnorm(beta[county[i]], sigma^(-2))
}
for(j in 1:85) {
beta[j] ~ dnorm(mu, sigma.b^(-2))
}
mu ~ dnorm(0, 0.0001)
sigma ~ dunif(0, 100)
sigma.b ~ dunif(0, 100)
}
'
cat(mod_county.bugs, file = 'mod_county.bugs')
J=85
r1.inits <- list(beta = rnorm(J), mu = rnorm(1),
sigma = runif(1), sigma.b = runif(1),J=)
cat(mod_county.bugs, file = 'mod_county.bugs')
J=85
r1.inits <- list(beta = rnorm(J), mu = rnorm(1),
sigma = runif(1), sigma.b = runif(1))
r1.jags <- jags.model("mod_county.bugs", inits = r1.inits)
mod_county.bugs<-'
model {
for(i in 1:919) {
y[i] ~ dnorm(beta[county[i]], sigma^(-2))
}
for(j in 1:85) {
beta[j] ~ dnorm(mu, sigma.b^(-2))
}
mu ~ dnorm(0, 0.0001)
sigma ~ dunif(0, 100)
sigma.b ~ dunif(0, 100)
}
'
cat(mod_county.bugs, file = 'mod_county.bugs')
J=85
r1.inits <- list(beta = rnorm(J), mu = rnorm(1),
sigma = runif(1), sigma.b = runif(1))
r1.jags <- jags.model("mod_county.bugs", inits = r1.inits)
cat(mod_county.bugs, file = 'mod_county.bugs')
J=85
r1.inits <- list(beta = rnorm(J), mu = rnorm(1),
sigma = runif(1), sigma.b = runif(1),county=radon.2$county)
r1.jags <- jags.model("mod_county.bugs", inits = r1.inits)
radon.2$county
radon.2$county[3]
mod_county.bugs<-'
model {
for(i in 1:919) {
y[i] ~ dnorm(beta[county[i]], sigma^(-2))
}
for(j in 1:85) {
beta[j] ~ dnorm(mu, sigma.b^(-2))
}
mu ~ dnorm(0, 0.0001)
sigma ~ dunif(0, 100)
sigma.b ~ dunif(0, 100)
county=radon.2$county
}
'
cat(mod_county.bugs, file = 'mod_county.bugs')
J=85
r1.inits <- list(beta = rnorm(J), mu = rnorm(1),
sigma = runif(1), sigma.b = runif(1),county=radon.2$county)
r1.jags <- jags.model("mod_county.bugs", inits = r1.inits)
cat(mod_county.bugs, file = 'mod_county.bugs')
J=85
r1.inits <- list(beta = rnorm(J), mu = rnorm(1),
sigma = runif(1), sigma.b = runif(1))
r1.jags <- jags.model("mod_county.bugs", inits = r1.inits)
View(radon.2)
View(radon.2)
cat(mod_county.bugs, file = 'mod_county.bugs')
J=85
r1.inits <- list(beta = rnorm(J), mu = rnorm(1),
sigma = runif(1), sigma.b = runif(1))
r1.jags <- jags.model("mod_county.bugs", inits = r1.inits)
mod_county.bugs<-'
model {
for(i in 1:919) {
y[i] ~ dnorm(beta[county[i]], sigma^(-2))
}
for(j in 1:85) {
beta[j] ~ dnorm(mu, sigma.b^(-2))
}
mu ~ dnorm(0, 0.0001)
sigma ~ dunif(0, 100)
sigma.b ~ dunif(0, 100)
county=c(1:85)
}
'
cat(mod_county.bugs, file = 'mod_county.bugs')
J=85
r1.inits <- list(beta = rnorm(J), mu = rnorm(1),
sigma = runif(1), sigma.b = runif(1))
r1.jags <- jags.model("mod_county.bugs", inits = r1.inits)
radon.2$county
c(radon.2$county)
c(radon.2$county)
radon.2$county
unique(radon.2$county)
str(radon.2)
mod_county.bugs<-'
model {
for(i in 1:919) {
y[i] ~ dnorm(beta[county[i]], sigma^(-2))
}
for(j in 1:85) {
beta[j] ~ dnorm(mu, sigma.b^(-2))
}
mu ~ dnorm(0, 0.0001)
sigma ~ dunif(0, 100)
sigma.b ~ dunif(0, 100)
}
'
cat(mod_county.bugs, file = 'mod_county.bugs')
data_radonx <- list(n = nrow(radon.2), y = y, county = radon.2$county,J=unique(radon.2$county))
r1.inits <- list(beta = rnorm(J), mu = rnorm(1),
sigma = runif(1), sigma.b = runif(1))
r1.jags <- jags.model("mod_county.bugs", inits = r1.inits,data=data_radonx)
levels(radon.2$county)
cat(mod_county.bugs, file = 'mod_county.bugs')
data_radonx <- list(n = nrow(radon.2), y = y, county = radon.2$county,J=unique(radon.2$county))
r1.inits <- list(beta = rnorm(J), mu = rnorm(1),
sigma = runif(1), sigma.b = runif(1))
#r1.jags <- jags.model("mod_county.bugs", inits = r1.inits,data=data_radonx)
setwd("/home/abraham/tarea_mineria/examen2")
source('utils.R')
library(readr)
adults<-read_csv('adult.csv',col_names = TRUE)# <- read_csv('https://www.dropbox.com/sh/ilk9kv509r10iks/AABL-VC0fQ-7hPGAz8xET-eWa?dl=0&preview=adult.csv',col_names = TRUE)
head(adults)
adult_colname<-colnames(adults)
colnames(adults)<-clean_names(adult_colname)
head(adults)
#graficamos todas las variables...
geda(adults,15)#15 representa la variabe income que es el target
mosaicplot(income~ race + sex , data = adults,legend=TRUE,color=T)
doubledecker(income ~ workclass+sex, data = adults)
#quitando el setor privado para mejor visualización
library(feather)
write_feather(x = adults, path='adults.feather')
