titanic_path <- '/intro_to_ds/data/Titanic/titanic.ods'
titanic_path <- '/home/abraham/intro_to_ds/data/Titanic/titanic.ods'
ds_names <- ods_sheets(titanic_path)
ds_names
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {
install.packages(as.character(paquete), dependecies = TRUE, repos = "http://cran.us.r-project.org")
library(paquete, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
paquetes <- c('lubridate', 'magrittr', 'ggvis', 'dplyr', 'tidyr', 'readr', 'rvest',
'ggplot2', 'stringr', 'ggthemes', 'googleVis', 'shiny', 'tibble', 'vcd', 'vcdExtra',
'GGally', 'readODS', 'readxl', "RSQLite")
lapply(paquetes, instalar)
install.packages('ggthemes')
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {
install.packages(as.character(paquete), dependecies = TRUE, repos = "http://cran.us.r-project.org")
library(paquete, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
paquetes <- c('lubridate', 'magrittr', 'ggvis', 'dplyr', 'tidyr', 'readr', 'rvest',
'ggplot2', 'stringr', #'ggthemes',
'googleVis', 'shiny', 'tibble', 'vcd', 'vcdExtra',
'GGally', 'readODS', 'readxl', "RSQLite")
lapply(paquetes, instalar)
installed.packages('readxl')
install.packages('readxl')
titanic_path <- '/home/abraham/intro_to_ds/data/Titanic/titanic.ods'
ds_names <- ods_sheets(titanic_path)
ds_names
library(readxl)
titanic_path <- '/home/abraham/intro_to_ds/data/Titanic/titanic.ods'
ds_names <- ods_sheets(titanic_path)
ds_names
ds_names <- ods_sheets(titanic_path)
install.packages('readODS')
titanic_path <- '/home/abraham/intro_to_ds/data/Titanic/titanic.ods'
ds_names <- ods_sheets(titanic_path)
ds_names
library(readODS)
titanic_path <- '/home/abraham/intro_to_ds/data/Titanic/titanic.ods'
ds_names <- ods_sheets(titanic_path)
ds_names
clean_sheet_name <- function(sheet_name) {
str_replace_all(str_replace_all(string=sheet_name, pattern=" ", replace="_"), pattern="'", replace="") %>%
str_to_lower()
}
sapply(ds_names, clean_sheet_name)
save_sheet <- function(sheet_name) {
file_name <-  paste0("../data/Titanic/", clean_sheet_name(sheet_name), ".rds")
saveRDS(object = read_ods(titanic_path, sheet = sheet_name), file = file_name)
}
lapply(ods_sheets(titanic_path), save_sheet)
save_sheet <- function(sheet_name) {
file_name <-  paste0("/home/abraham/intro_to_ds/data/Titanic/", clean_sheet_name(sheet_name), ".rds")
saveRDS(object = read_ods(titanic_path, sheet = sheet_name), file = file_name)
}
lapply(ods_sheets(titanic_path), save_sheet)
rm(list=ls())
rds_files <- dir("../data/Titanic/", pattern = "*.rds", full.names = TRUE)
#lapply te devolverá las cosas en un lista... una lista de dataframes :)
ds <- lapply(rds_files, read_rds)
class(ds)
class(ds[[1]])
#cuantos dataframes contiene esta lista?
length(ds)
#basename elimina todo el path del nombre excepto la última parte (se quedará con la extensión del archivo!), ?basename
names(ds) <- lapply(rds_files, basename)
names(ds)
rm(list=ls())
rds_files <- dir("/home/abraham/intro_to_ds/data/Titanic/", pattern = "*.rds", full.names = TRUE)
#lapply te devolverá las cosas en un lista... una lista de dataframes :)
ds <- lapply(rds_files, read_rds)
class(ds)
class(ds[[1]])
#cuantos dataframes contiene esta lista?
length(ds)
#basename elimina todo el path del nombre excepto la última parte (se quedará con la extensión del archivo!), ?basename
names(ds) <- lapply(rds_files, basename)
names(ds)
#veamos qué nombres tiene cada dataframe
lapply(ds, names)
#si quisieramos obtener los conjuntos de nombres únicos
lapply(ds, names) %>% unique()
lapply(ds, head)
ds <- ds[-which(lapply(lapply(ds, names), length) == 2)]
num_cols <- lapply((lapply(ds, names)), length) %>% unlist() %>% min()
num_cols
lapply(ds, str)
ds <- lapply(ds, function(x) lapply(x, as.character))
#verifiquemos
lapply(ds, str)
#bind_rows es como rbind solo que optimizado por Hadley Wickham :)
titanic <- bind_rows(ds)[, 1:num_cols]
names(titanic) <- str_replace_all(names(titanic), "/| ", "_") %>%
str_to_lower()
names(titanic)
titanic <- tbl_df(titanic)
titanic
titanic <- titanic %>%
separate(name, into=c("last_name", "name"), sep=",", extra="drop") %>%
separate(fare, into=c("pounds", "shillings", "pence"), sep=" ", extra="drop") %>%
separate(age, into=c("age", "units"), sep=2, extra="drop") %>%
mutate(sex=ifelse(grepl("Miss|Mrs|Mme.|Lady|Doña|Ms", name), 'F',
ifelse(grepl("Mr|Sir|Sig|Dr|Master|Captain|Major|Rev.|Colonel|Fr|Don.", name), 'M', NA))) %>%
mutate(boat_location=ifelse(as.integer(boat) %in% c(9:16), 'Popa',
ifelse(boat %in% c(LETTERS[1:4]) | as.integer(boat) %in% c(1:8), 'Proa', NA))) %>%
mutate(age=ifelse(units == "m", 1, as.integer(age))) %>%
mutate(survived=!is.na(boat)) %>%
dplyr::select(-c(shillings, pence, body, units)) %>%
mutate(pounds=str_replace(pounds, "£", "") %>% as.integer()) %>%
mutate(class_dept=as.factor(class_dept), group=as.factor(group), ship=as.factor(ship),
joined=as.factor(joined), job=as.factor(job), boat=as.factor(boat),
sex=as.factor(sex), boat_location=as.factor(boat_location))
summary(titanic)
titanic <- titanic %>% mutate(age = ifelse(age <= 18, "infante",
ifelse(age > 65, "adulto mayor",
"adulto")))
#verifiquemos
titanic
ggplot(titanic, aes(pounds)) +
geom_histogram(binwidth = 30, na.rm=T) +
theme_bw()
titanic <- titanic %>%
group_by(ticket) %>%
mutate(pounds_per_ticket = round(pounds/n())) %>%
ungroup()
titanic
titanic %>% filter(class_dept %in% c('1st Class', '2nd Class', '3rd Class')) %>%
ggplot(aes(pounds_per_ticket)) +
geom_histogram(binwidth = 10) +
facet_grid(class_dept~., scales = "free_y") +
theme_bw()
titanic %>%
group_by(boat_location) %>%
summarise(n=n())
titanic %>%
group_by(boat) %>%
summarise(n=n()) %>%
arrange(desc(n))
sqlite3
library(RSQLite)
install.packages('RSQLite')
library(RSQLite)
berka_db <- src_sqlite(path="~/Documents/itam/introduction_to_ds/intro_to_ds/data/berka/berka.raw",
create=FALSE)
db_list_tables(berka_db$con)
# para cada paso decidimos el movimiento de acuerdo a la siguiente función
caminaAleat <- function(theta){ # theta: valor actual
salto_prop <- rnorm(1, 0, sd = 5) # salto propuesto
theta_prop <- theta + salto_prop # theta propuesta
if(theta_prop < 0 | theta_prop > 1){ # si el salto implica salir del dominio
return(theta)
}
u <- runif(1)
p_move <-  min(postRelProb(theta_prop) / postRelProb(theta), 1) # prob mover
if(p_move  > u){
return(theta_prop) # aceptar valor propuesto
}
else{
return(theta) # rechazar
}
}
set.seed(47405)
pasos <- 6000
camino <- numeric(pasos) # vector que guardará las simulaciones
camino[1] <- 0.1 # valor inicial
# Generamos la caminata aleatoria
for (j in 2:pasos){
camino[j] <- caminaAleat(camino[j - 1])
}
postRelProb <- function(theta){
mi_like(theta) * mi_prior(theta)
}
# para cada paso decidimos el movimiento de acuerdo a la siguiente función
caminaAleat <- function(theta){ # theta: valor actual
salto_prop <- rnorm(1, 0, sd = 5) # salto propuesto
theta_prop <- theta + salto_prop # theta propuesta
if(theta_prop < 0 | theta_prop > 1){ # si el salto implica salir del dominio
return(theta)
}
u <- runif(1)
p_move <-  min(postRelProb(theta_prop) / postRelProb(theta), 1) # prob mover
if(p_move  > u){
return(theta_prop) # aceptar valor propuesto
}
else{
return(theta) # rechazar
}
}
set.seed(47405)
pasos <- 6000
camino <- numeric(pasos) # vector que guardará las simulaciones
camino[1] <- 0.1 # valor inicial
# Generamos la caminata aleatoria
for (j in 2:pasos){
camino[j] <- caminaAleat(camino[j - 1])
}
prior <- function(mu, tau){
function(theta){
dnorm(theta, mean=mu, sd=1/tau)
}
}
mi_prior<-prior(150,15)
# S: sum x_i, S2: sum x_i^2, N: número obs.
likeNorm <- function(S, S2, N){
function(theta){
(1/((2*pi*20**2)**(N/2)))*exp((-1/(2*20**2))(s2-2*theta*S+N*theta**2))
}
}
# S: sum x_i, S2: sum x_i^2, N: número obs.
likeNorm <- function(S, S2, N){
function(theta){
(1/((2*pi*20**2)**(N/2)))*exp((-1/(2*20**2))(s2-2*theta*S+N*theta**2))
}
}
mi_like<-likeNorm(13000,1700000,100)
postRelProb <- function(theta){
mi_like(theta) * mi_prior(theta)
}
# para cada paso decidimos el movimiento de acuerdo a la siguiente función
caminaAleat <- function(theta){ # theta: valor actual
salto_prop <- rnorm(1, 0, sd = 5) # salto propuesto
theta_prop <- theta + salto_prop # theta propuesta
if(theta_prop < 0 | theta_prop > 1){ # si el salto implica salir del dominio
return(theta)
}
u <- runif(1)
p_move <-  min(postRelProb(theta_prop) / postRelProb(theta), 1) # prob mover
if(p_move  > u){
return(theta_prop) # aceptar valor propuesto
}
else{
return(theta) # rechazar
}
}
set.seed(47405)
pasos <- 6000
camino <- numeric(pasos) # vector que guardará las simulaciones
camino[1] <- 0.1 # valor inicial
# Generamos la caminata aleatoria
for (j in 2:pasos){
camino[j] <- caminaAleat(camino[j - 1])
}
mi_prior(.3)
mi_like(.3)
(1/((2*pi*20**2)**(1/2)))*exp((-1/(2*20**2))(3-2*4*S+1*4**2))
(1/((2*pi*20**2)**(1/2)))*exp((-1/(2*20**2))*(3-2*4*S+1*4**2))
(1/((2*pi*20**2)**(1/2)))*exp((-1/(2*20**2))*(3-2*4*5+1*4**2))
# S: sum x_i, S2: sum x_i^2, N: número obs.
likeNorm <- function(S, S2, N){
function(theta){
(1/((2*pi*20**2)**(N/2)))*exp((-1/(2*20**2))*(s2-2*theta*S+N*theta**2))
}
}
mi_like<-likeNorm(13000,1700000,100)
postRelProb <- function(theta){
mi_like(theta) * mi_prior(theta)
}
# para cada paso decidimos el movimiento de acuerdo a la siguiente función
caminaAleat <- function(theta){ # theta: valor actual
salto_prop <- rnorm(1, 0, sd = 5) # salto propuesto
theta_prop <- theta + salto_prop # theta propuesta
if(theta_prop < 0 | theta_prop > 1){ # si el salto implica salir del dominio
return(theta)
}
u <- runif(1)
p_move <-  min(postRelProb(theta_prop) / postRelProb(theta), 1) # prob mover
if(p_move  > u){
return(theta_prop) # aceptar valor propuesto
}
else{
return(theta) # rechazar
}
}
set.seed(47405)
pasos <- 6000
camino <- numeric(pasos) # vector que guardará las simulaciones
camino[1] <- 0.1 # valor inicial
# Generamos la caminata aleatoria
for (j in 2:pasos){
camino[j] <- caminaAleat(camino[j - 1])
}
# S: sum x_i, S2: sum x_i^2, N: número obs.
likeNorm <- function(S, S2, N){
function(theta){
(1/((2*pi*20**2)**(N/2)))*exp((-1/(2*20**2))*(s2-2*theta*S+N*theta**2))
}
}
mi_like<-likeNorm(13000,1700000,100)
postRelProb <- function(theta){
mi_like(theta) * mi_prior(theta)
}
# para cada paso decidimos el movimiento de acuerdo a la siguiente función
caminaAleat <- function(theta){ # theta: valor actual
salto_prop <- rnorm(1, 0, sd = 5) # salto propuesto
theta_prop <- theta + salto_prop # theta propuesta
if(theta_prop < 0 | theta_prop > 1){ # si el salto implica salir del dominio
return(theta)
}
u <- runif(1)
p_move <-  min(postRelProb(theta_prop) / postRelProb(theta), 1) # prob mover
if(p_move  > u){
return(theta_prop) # aceptar valor propuesto
}
else{
return(theta) # rechazar
}
}
set.seed(47405)
pasos <- 6000
camino <- numeric(pasos) # vector que guardará las simulaciones
camino[1] <- 0.1 # valor inicial
# Generamos la caminata aleatoria
for (j in 2:pasos){
camino[j] <- caminaAleat(camino[j - 1])
}
# S: sum x_i, S2: sum x_i^2, N: número obs.
likeNorm <- function(S, S2, N){
function(theta){
(1/((2*pi*20**2)**(N/2)))*exp((-1/(2*20**2))*(S2-2*theta*S+N*theta**2))
}
}
mi_like<-likeNorm(13000,1700000,100)
mi_like<-likeNorm(13000,1700000,100)
postRelProb <- function(theta){
mi_like(theta) * mi_prior(theta)
}
# para cada paso decidimos el movimiento de acuerdo a la siguiente función
caminaAleat <- function(theta){ # theta: valor actual
salto_prop <- rnorm(1, 0, sd = 5) # salto propuesto
theta_prop <- theta + salto_prop # theta propuesta
if(theta_prop < 0 | theta_prop > 1){ # si el salto implica salir del dominio
return(theta)
}
u <- runif(1)
p_move <-  min(postRelProb(theta_prop) / postRelProb(theta), 1) # prob mover
if(p_move  > u){
return(theta_prop) # aceptar valor propuesto
}
else{
return(theta) # rechazar
}
}
set.seed(47405)
pasos <- 6000
camino <- numeric(pasos) # vector que guardará las simulaciones
camino[1] <- 0.1 # valor inicial
# Generamos la caminata aleatoria
for (j in 2:pasos){
camino[j] <- caminaAleat(camino[j - 1])
}
# para cada paso decidimos el movimiento de acuerdo a la siguiente función
caminaAleat <- function(theta){ # theta: valor actual
salto_prop <- rnorm(1, 0, sd = 5) # salto propuesto
theta_prop <- theta + salto_prop # theta propuesta
if(theta_prop < 0 | theta_prop > 1){ # si el salto implica salir del dominio
return(theta)
}
u <- runif(1)
p_move <-  min(postRelProb(theta_prop) / postRelProb(theta), 1) # prob mover
print(p_move)
if(p_move  > u){
return(theta_prop) # aceptar valor propuesto
}
else{
return(theta) # rechazar
}
}
set.seed(47405)
pasos <- 6000
camino <- numeric(pasos) # vector que guardará las simulaciones
camino[1] <- 0.1 # valor inicial
# Generamos la caminata aleatoria
for (j in 2:pasos){
camino[j] <- caminaAleat(camino[j - 1])
}
mi_like(3)
mi_like(5)
postRelProb(3)
postRelProb(3)
w<-rnorm(1, 0, sd = 5)
w
mi_[mi_prior(w)]
mi_prior(w)
mi_like(w)
mi_prior(w)*mi_like(w)
d(w,150,1/15)
dnorm(w,150,1/15)
dnorm(.5,150,1/15)
dnorm(.45,150,1/15)
d(w,150,15)
dnorm(.45,150,1/15)
dnorm(.45,150,15)
dnorm(.45,150,15)
dnorm(w,150,15)
dnorm(.9,150,15)
dnorm(.09,150,15)
dnorm(9,150,15)
dnorm(90,150,15)
dnorm(900,150,15)
dnorm(9000,150,15)
dnorm(906,150,15)
dnorm(789,150,15)
dnorm(100,150,15)
dnorm(150,150,15)
dnorm(250,150,15)
dnorm(190,150,15)
dnorm(200,150,15)
dnorm(206,150,15)
prior <- function(mu, tau){
function(theta){
dnorm(theta, mean=mu, sd=tau)
}
}
mi_prior<-prior(150,15)
# S: sum x_i, S2: sum x_i^2, N: número obs.
likeNorm <- function(S, S2, N){
function(theta){
(1/((2*pi*20**2)**(N/2)))*exp((-1/(2*20**2))*(S2-2*theta*S+N*theta**2))
}
}
mi_like<-likeNorm(13000,1700000,100)
mi_like(w)
w
(1/((2*pi*20**2)**(100/2)))*exp((-1/(2*20**2))*(1700000-2*w*13000+100*w**2))
(1/((2*pi*20**2)**(100/2)))*exp((-1/(2*20**2))*(1700000-2*w*13000+100*w**2))
(1/((2*pi*20**2)**(100/2)))*exp((-1/(2*20**2))*(1700000-2*w*13000+100*w**2))
mi_like(w)
mi_like(2000)
mi_like(2000000)
mi_like(.0001)
mi_like(.00000000001)
mi_like(0)
mi_prior<-prior(150,15)
# S: sum x_i, S2: sum x_i^2, N: número obs.
likeNorm <- function(S, S2, N){
function(theta){
(1/((2*pi*20**2)**(N/2)))*exp((-1/(2*20**2))*(S2-2*theta*S+N*theta**2))
}
}
mi_like<-likeNorm(13000,1700000,100)
postRelProb <- function(theta){
mi_like(theta) * mi_prior(theta)
}
# para cada paso decidimos el movimiento de acuerdo a la siguiente función
caminaAleat <- function(theta){ # theta: valor actual
salto_prop <- rnorm(1, 0, sd = 5) # salto propuesto
theta_prop <- theta + salto_prop # theta propuesta
if(theta_prop < 0 | theta_prop > 1){ # si el salto implica salir del dominio
return(theta)
}
u <- runif(1)
p_move <-  min(ifelse(postRelProb(theta)!=0,postRelProb(theta_prop) / postRelProb(theta),1.1), 1) # prob mover
print(p_move)
if(p_move  > u){
return(theta_prop) # aceptar valor propuesto
}
else{
return(theta) # rechazar
}
}
set.seed(47405)
pasos <- 6000
camino <- numeric(pasos) # vector que guardará las simulaciones
camino[1] <- 0.1 # valor inicial
# Generamos la caminata aleatoria
for (j in 2:pasos){
camino[j] <- caminaAleat(camino[j - 1])
}
caminata <- data.frame(pasos = 1:pasos, theta = camino)
ggplot(caminata[1:3000, ], aes(x = pasos, y = theta)) +
geom_point(size = 0.8) +
geom_path(alpha = 0.5) +
scale_y_continuous(expression(theta), limits = c(0, 1)) +
scale_x_continuous("Tiempo") +
geom_vline(xintercept = 600, color = "red", alpha = 0.5)
library(ggplot2)
# para cada paso decidimos el movimiento de acuerdo a la siguiente función
caminaAleat <- function(theta){ # theta: valor actual
salto_prop <- rnorm(1, 0, sd = 5) # salto propuesto
theta_prop <- theta + salto_prop # theta propuesta
if(theta_prop < 0 | theta_prop > 1){ # si el salto implica salir del dominio
return(theta)
}
u <- runif(1)
p_move <-  min(ifelse(postRelProb(theta)!=0,postRelProb(theta_prop) / postRelProb(theta),1.1), 1) # prob mover
print(p_move)
if(p_move  > u){
return(theta_prop) # aceptar valor propuesto
}
else{
return(theta) # rechazar
}
}
set.seed(47405)
pasos <- 6000
camino <- numeric(pasos) # vector que guardará las simulaciones
camino[1] <- 0.1 # valor inicial
# Generamos la caminata aleatoria
for (j in 2:pasos){
camino[j] <- caminaAleat(camino[j - 1])
}
caminata <- data.frame(pasos = 1:pasos, theta = camino)
ggplot(caminata[1:3000, ], aes(x = pasos, y = theta)) +
geom_point(size = 0.8) +
geom_path(alpha = 0.5) +
scale_y_continuous(expression(theta), limits = c(0, 1)) +
scale_x_continuous("Tiempo") +
geom_vline(xintercept = 600, color = "red", alpha = 0.5)
setwd("/home/abraham/tarea_mineria/examen1/examen1")
